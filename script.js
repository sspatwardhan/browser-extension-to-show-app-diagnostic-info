let baseURL, tcsHeader, xCookie, tcsContainerSite

function injectScript() {
  return localStorage.getItem("Iron.token")
}

async function getTcsIronToken() {
  // Get the current tab
  const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
  const tab = tabs[0];
  // Execute script in the current tab
  return await chrome.scripting.executeScript({ target: { tabId: tab.id }, func: injectScript });
}

async function getBaseURL() {
  let queryOptions = { active: true, currentWindow: true };
  let [tab] = await chrome.tabs.query(queryOptions);
  let domain = (new URL(tab.url));
  return `https://${domain.hostname}/cns`;
}

function copyMe(elementID, replaceText){
  let copyText = document.getElementById(`${elementID}`).innerText.replace(replaceText,'').replace('Copy','')
  copyText = copyText.replaceAll('------ ','') // this remvoves hyphens from service versions
  navigator.clipboard.writeText(copyText)
  var x = document.getElementById("snackbar");
  x.className = "show";
  setTimeout(function(){ x.className = x.className.replace("show", ""); }, 3000);
}

async function createTcsApiToken(){
  // Get Server properties
  const res = await fetch(`${baseURL}/v1/api/application`, {
    headers: {
      "x-cookie": xCookie
    },
    body: "{\"appName\":\"Tcs Diagnostics - Browser Extension\",\"description\":\"Autogenerated by browser extension\"}",
    method: "POST",
  });
  creteTokenResponse = await res.json();
  setItUp('tcsApiToken',`API Token: ${creteTokenResponse.appToken}`,'API Token: ')
}

function setItUp(parentElemID, parentElementVal, txtToReplaceWhenCopying) {
  // if there is no custom request
  if ( !parentElemID.includes(':custom') ){
    // First set the value of the parent element
    document.getElementById(parentElemID).innerText = parentElementVal
    // Set the copy button next to parentElement
    var cpyBtn = document.createElement('i')
    cpyBtn.id = `${parentElemID}Copy`
    cpyBtn.innerHTML = '<i class="fa fa-clipboard button-10" role="button"></i>'
    cpyBtn.style.marginLeft = '5px'
    cpyBtn.style.marginRight = '5px'
    // cpyBtn.style.backgroundColor = '#1976d2';
    cpyBtn.onclick = function () { copyMe(parentElemID,txtToReplaceWhenCopying) }
    document.getElementById(parentElemID).prepend(cpyBtn)
  }
  else if ( parentElemID.includes(':customButton') ){
    const pareElement = parentElemID.split(':customButton')[0]
    // First set the value of the parent element
    document.getElementById(pareElement).innerText = parentElementVal
    // Set the Yes button next to parentElement
    var buttonYes = document.createElement('i')
    buttonYes.id = `${pareElement}_btnYes`
    buttonYes.innerHTML = '<i class="fa fa-check button-10" role="button"></i>'
    // buttonYes.innerText = "Yes"
    buttonYes.style.marginLeft = '5px'
    // cpyBtn.style.marginRight = '5px'
    buttonYes.onclick = function () {createTcsApiToken()}
    document.getElementById(pareElement).append(buttonYes)
  }
}

document.getElementById("tcsButton").addEventListener("click", openTcs);
function openTcs(){
  window.open('https://cloud.tenable.com','_blank')
}

// Feature flag getter
async function getFeatureFlagValue(){
  const requestedFlagName = document.getElementById("featureFlagName").value
  if ( requestedFlagName == ''){
    //do nothing
  }
  else{
    res = await fetch(`${baseURL.replace('/cns', '/feature-flags')}`,
    { method: 'POST', body: '[\"' + requestedFlagName + '\"]',
    headers: { "accept": "*/*", 'x-cookie': xCookie, "content-type": "application/json" } });
    resJson = await res.json();

    const featureFlagButton = document.getElementById("featureFlagButton");
    const featureFlagAge = document.getElementById("featureFlagAge")

    if(resJson[requestedFlagName] == undefined){
      document.getElementById("featureFlagValue").innerHTML = "flag not found"
      featureFlagButton.hidden = true;
      featureFlagAge.hidden = true;
    }
    else{
      // set feature flag age
      ffRes = await fetch(`https://app.launchdarkly.com/api/v2/flags/<YOUR-PROJECT>/${requestedFlagName}`,
      { method: 'GET',
      headers: { "accept": "*/*", 'Authorization': api_xxxxx, "content-type": "application/json" } });
      ffResJson = await ffRes.json();
      featureFlagAge.innerHTML = calculateAgeFromEpoch(ffResJson["creationDate"])
      
      // Set open launch darkly
      featureFlagButton.addEventListener("click", function() {
        // Replace 'TARGET_URL' with the actual URL you want to open in a new tab
        const targetURL = `https://app.launchdarkly.com/tenable-io/${tcsContainerSite.replace("-","_")}/features/${requestedFlagName}/targeting`;
        window.open(targetURL, "_blank");
      });
      
      // set feature flag fields
      document.getElementById("featureFlagValue").innerHTML = resJson[requestedFlagName] === "true" ? 'Enabled' : 'Disabled'
      featureFlagAge.hidden = false;
      featureFlagButton.hidden = false;
    }
  }
}

async function fetchData() {
  baseURL = await getBaseURL()
  tcsHeader = await getTcsIronToken()
  xCookie = `token=${tcsHeader[0].result}`

  // Get Versions
  let res = await fetch(`${baseURL}/version.json`);
  let resJson = await res.json();
  const uiVersion = resJson.version
  res = await fetch(`${baseURL}/health`);
  resJson = await res.json();
  const siacVersion = resJson.GitCommitSha
  const cliVersion = resJson.cliVersion
  const onpremScannerVersion = resJson.botVersion.bot
  res = await fetch(`${baseURL}/cmdb/health`);
  resJson = await res.json();
  const cmdbVersion = resJson.version
  setItUp('serviceVersion',`Service versions:
  \n ------ UI: ${uiVersion},
  \n ------ SIAC: ${siacVersion},
  \n ------ CMDB: ${cmdbVersion},
  \n ------ OnPrem Scanner: ${onpremScannerVersion}`,'Service versions: ')

  // Set session details
  res = await fetch(`${baseURL}/v1/api/auth/me`, { headers: { 'x-cookie': xCookie } });
  resJson = await res.json();
  setItUp('session',`Session Token: ${xCookie.split('=')[1]}`,'Session Token: ')
  // setItUp('currentUserEmail',`Current User Email: ${resJson.email}`,'Current User Email: ')
  setItUp('currentUserID',`Current User ID: ${resJson.userID}`,'Current User ID: ')

  // Get Server properties
  res = await fetch(`${baseURL.replace('/cns', '')}/server/properties`, { headers: { 'x-cookie': xCookie } });
  resJson = await res.json();
  tcsContainerSite = resJson.site_id
  setItUp('containerSite',`Container Site: ${tcsContainerSite}`,'Container Site: ')
  setItUp('containerRegion',`Container Region: ${resJson.region}`,'Container Region: ')
  
  // Get Resource Counts
  res = await fetch(`${baseURL}/v2/api/resources/global/metering/types/count`, { headers: { 'x-cookie': xCookie, 'Content-Type':'application/json', 'Accept':'application/json' } });
  resJson = await res.json();
  const tcsContainerID = resJson[0].tenant
  // Set container ID - 
  setItUp('containerID',`Container ID: ${tcsContainerID}`,'Container ID: ')
  // To open splunk logs
  document.getElementById('splunkLogsButton').addEventListener("click", function() {
    // Replace 'TARGET_URL' with the actual URL you want to open in a new tab
    const splunkLogURL = `https://tenable.splunkcloud.com/en-GB/app/search/search?q=search%20index%3D%22${tcsContainerSite}%22%20${tcsContainerID}%20|%20dedup%20msg%20|%20stats%20count%20by%20process&earliest=-15m&latest=now`;
    window.open(splunkLogURL, "_blank");
  });
  
  // Get IaC Resource Total
  let iacResTotal = 0;
  if (resJson[0].iac != null) {
    resJson[0].iac.forEach(element => {
      iacResTotal = iacResTotal + element.count
    });
  }
  // Get Cloud Resource Total
  let cloudResTotal = 0;
  if (resJson[0].cloud != null) {
    resJson[0].cloud.forEach(element => {
      cloudResTotal = cloudResTotal + element.count
    });
  }
  setItUp('discoveredResources',`Resources: IaC - ${iacResTotal}, Cloud - ${cloudResTotal}`,'Resources: ')

  // Check integrated SCMs
  var integratedSCMs = ''
  res = await fetch(`${baseURL}/v1/api/code/integration/status`, { headers: { 'x-cookie': xCookie, 'Content-Type':'application/json', 'Accept':'application/json' } });  
  resJson = await res.json();
  resJson.forEach(scm => {
    if(scm.status==='AUTHENTICATED'){
      integratedSCMs = integratedSCMs + ' ' + scm.source
    }
  });
  setItUp('integratedSCMs',`Integrated SCMs: ${integratedSCMs}`,'Integrated SCMs: ')

  // Show API Token
  res = await fetch(`${baseURL}/v1/api/application`, { headers: { 'x-cookie': xCookie, 'Content-Type':'application/json', 'Accept':'application/json' } });  
  resJson = await res.json();
  if (resJson.length !== 0) {
    setItUp('tcsApiToken',`API Token: ${resJson.find(apiTokens => apiTokens.enabled === true).appToken}`,'API Token: ')
  }
  // Else put a button asking "Not found. Create new?"
  else if(resJson.length == 0) {
    console.log('api tokens not found. asking to create new..')
    setItUp('tcsApiToken:customButton', `API Token: Not found. Create new?`, 'API Token: ')
  }

  // Get IPv4 - This one is slow. Keep this to the end
  res = await fetch("https://api.bigdatacloud.net/data/client-ip");
  resJson = await res.json();
  setItUp('yourIPv4',`Your IPv4: ${resJson.ipString}`,'Your IPv4: ')
}

fetchData();

function debounce(callback, wait) {
  let timeout;
  return (...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(function () { callback.apply(this, args); }, wait);
  };
}

// Events
// Will fetch the flag value after waiting for 1 sec when user stops typing/pasting
window.addEventListener('keyup', debounce( () => {
  getFeatureFlagValue()
}, 1000))

document.addEventListener('DOMContentLoaded', function () {
  const textarea = document.getElementById('tcsQuestion');
  textarea.addEventListener('keydown', function (event) {
    if (event.key === 'Enter') {
      const query = encodeURIComponent(textarea.value);
      const searchUrl = `https://www.google.com/search?q=${query}+tenable+cloud+security`;
      chrome.tabs.create({ url: searchUrl });
    }
  });
});


function calculateAgeFromEpoch(timestamp) {
  const now = Date.now();
  const ageInMilliseconds = now - timestamp;
  const secondsInYear = 31536000; // 365 days * 24 hours * 60 minutes * 60 seconds
  const secondsInMonth = 2592000; // Average days in a month * 24 hours * 60 minutes * 60 seconds
  const secondsInDay = 86400;     // 24 hours * 60 minutes * 60 seconds
  const ageInSeconds = ageInMilliseconds / 1000;
  const years = Math.floor(ageInSeconds / secondsInYear);
  const months = Math.floor((ageInSeconds % secondsInYear) / secondsInMonth);
  const days = Math.floor((ageInSeconds % secondsInMonth) / secondsInDay);
  return `${years} years, ${months} months, and ${days} days`;
}





































































const api_ecf9aff4 = 'api-ecf9aff4-5281-4378-a5e0-001fced4f0d6' //This has cisco-IP tracker enabled. Do not misuse.